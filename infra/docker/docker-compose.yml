version: '3.9'

services:
  datadog-agent:
    image: gcr.io/datadoghq/agent:7
    container_name: datadog-agent
    env_file:
      - ./.env
      - ../../apps/api/.env
    environment:
      DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL: ${DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL:-true}
    ports:
      - '8126:8126' # APM
      - '8125:8125/udp' # DogStatsD
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - ./datadog/conf.d/nx-arag-logs.d/conf.yaml:/etc/datadog-agent/conf.d/nx-arag-logs.d/conf.yaml:ro
    restart: unless-stopped

  migrate:
    build:
      context: ../..
      dockerfile: Dockerfile.dev
    container_name: nx-arag-migrate
    working_dir: /workspace
    command: ./infra/docker/scripts/run-prisma-migrations.sh
    env_file:
      - ./.env
      - ../../apps/api/.env
      - ../../apps/ingest-svc/.env
    volumes:
      - ../..:/workspace:delegated
      - migrate-node-modules:/workspace/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    restart: 'no'

  api:
    build:
      context: ../..
      dockerfile: Dockerfile.dev
    container_name: nx-arag-api
    working_dir: /workspace
    command: yarn start:api
    env_file:
      - ./.env
      - ../../apps/api/.env
    ports:
      - '${API_PORT}:3000'
    # Bind-mount source, but DON'T hide node_modules from the image:
    volumes:
      - ../..:/workspace:delegated
      # Re-expose node_modules from the image using a separate volume
      - api-node-modules:/workspace/node_modules
    labels:
      com.datadoghq.logs: '[{"service":"nx-arag-api","source":"nodejs","env":"${DD_ENV}"}]'
      com.datadoghq.tags.env: ${DD_ENV}
      com.datadoghq.tags.service: nx-arag-api
      com.datadoghq.tags.version: ${DD_VERSION}
    depends_on:
      migrate:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      datadog-agent:
        condition: service_started
      # search-svc:
      #   condition: service_started
      ingest-svc:
        condition: service_started
      redis:
        condition: service_started
      # meilisearch:
      #   condition: service_started
      # minio:
      #   condition: service_started

  ingest-svc:
    build:
      context: ../..
      dockerfile: Dockerfile.dev
    container_name: nx-arag-ingest
    working_dir: /workspace
    command: yarn start:ingest
    env_file:
      - ./.env
      - ../../apps/ingest-svc/.env
    ports:
      - '${INGEST_PORT}:50052'
    volumes:
      - ../..:/workspace:delegated
      - ingest-node-modules:/workspace/node_modules
    labels:
      com.datadoghq.logs: '[{"service":"nx-arag-ingest","source":"nodejs","env":"${DD_ENV}"}]'
      com.datadoghq.tags.env: ${DD_ENV}
      com.datadoghq.tags.service: nx-arag-ingest
      com.datadoghq.tags.version: ${DD_VERSION}
    depends_on:
      migrate:
        condition: service_completed_successfully
      datadog-agent:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      # minio:
      #   condition: service_started
      # meilisearch:
      #   condition: service_started

  # search-svc:
  #   build:
  #     context: ../..
  #     dockerfile: Dockerfile.dev
  #   container_name: nx-arag-search
  #   working_dir: /workspace
  #   command: >-
  #     sh -c "yarn tsc -p apps/search-svc/tsconfig.app.json && node dist/apps/search-svc/apps/search-svc/src/main.js"
  #   env_file:
  #     - ./.env
  #     - ../../apps/search-svc/.env
  #   ports:
  #     - '50051:50051'
  #   volumes:
  #     - ../..:/workspace:delegated
  #     - search-node-modules:/workspace/node_modules
  #   labels:
  #     com.datadoghq.logs: '[{"service":"nx-arag-search","source":"nodejs","env":"${DD_ENV}"}]'
  #     com.datadoghq.tags.env: ${DD_ENV}
  #     com.datadoghq.tags.service: nx-arag-search
  #     com.datadoghq.tags.version: ${DD_VERSION}
  #   depends_on:
  #     - datadog-agent
  #     - postgres
  #     - meilisearch

  # meilisearch:
  #   image: getmeili/meilisearch:v1.10.3
  #   container_name: nx-arag-meilisearch
  #   environment:
  #     MEILI_NO_ANALYTICS: 'true'
  #     MEILI_MASTER_KEY: ${MEILISEARCH_MASTER_KEY}
  #   ports:
  #     - '${MEILISEARCH_PORT}:7700'
  #   volumes:
  #     - meilisearch-data:/meili_data
  #   restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: nx-arag-redis
    command: redis-server --save 60 1 --loglevel warning
    ports:
      - '${REDIS_PORT}:6379'
    volumes:
      - redis-data:/data
    restart: unless-stopped

  # minio:
  #   image: minio/minio:latest
  #   container_name: nx-arag-minio
  #   command: server /data --console-address ":9001"
  #   environment:
  #     MINIO_ROOT_USER: ${MINIO_ROOT_USER}
  #     MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
  #     MINIO_DOMAIN: ''
  #   ports:
  #     - '${MINIO_PORT}:9000'
  #     - '${MINIO_CONSOLE_PORT}:9001'
  #   volumes:
  #     - minio-data:/data
  #   restart: unless-stopped

  postgres:
    image: postgres:16-alpine
    container_name: nx-arag-db
    env_file:
      - ../../apps/api/.env
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - '${DATABASE_PORT}:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  api-node-modules:
  # search-node-modules:
  ingest-node-modules:
  migrate-node-modules:
  postgres-data:
  # meilisearch-data:
  redis-data:
  # minio-data:
