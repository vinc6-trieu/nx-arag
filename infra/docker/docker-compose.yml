version: '3.9'

services:
  datadog-agent:
    image: gcr.io/datadoghq/agent:7
    container_name: datadog-agent
    env_file:
      - ./.env
      - ../../apps/api/.env
    environment:
      DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL: ${DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL:-true}
    ports:
      - '8126:8126' # APM
      - '8125:8125/udp' # DogStatsD
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - ./datadog/conf.d/nx-arag-logs.d/conf.yaml:/etc/datadog-agent/conf.d/nx-arag-logs.d/conf.yaml:ro
    restart: unless-stopped

  api:
    build:
      context: ../..
      dockerfile: Dockerfile.dev
    container_name: nx-arag-api
    working_dir: /workspace
    # Ensure Prisma client is generated before starting the dev server
    command: sh -c "yarn db:generate:api && yarn dev:api"
    env_file:
      - ./.env
      - ../../apps/api/.env
    ports:
      - '${PORT}:3000'
    # Bind-mount source, but DON'T hide node_modules from the image:
    volumes:
      - ../..:/workspace:delegated
      # Re-expose node_modules from the image using a separate volume
      - api-node-modules:/workspace/node_modules
    labels:
      com.datadoghq.logs: '[{"service":"nx-arag-api","source":"nodejs","env":"${DD_ENV}"}]'
      com.datadoghq.tags.env: ${DD_ENV}
      com.datadoghq.tags.service: nx-arag-api
      com.datadoghq.tags.version: ${DD_VERSION}
    depends_on:
      - postgres
      - datadog-agent

  postgres:
    image: postgres:16-alpine
    container_name: nx-arag-db
    env_file:
      - ../../apps/api/.env
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - '${DATABASE_PORT}:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  api-node-modules:
  postgres-data:
